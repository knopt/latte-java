-- programs ------------------------------------------------

entrypoints Program ;

ProgramTD.   Program ::= [TopDef] ;

FnDef.	   TopDef  ::= Type Ident "(" [Arg] ")" Block ;
ClassDecl.  TopDef ::= ClassHeader "{" [FieldDeclaration] "}";

separator nonempty TopDef "" ;

ArgTI.  Arg ::= Type Ident;

separator  Arg "," ;

-- classes -------------------------------------------------

ClassDec.	ClassHeader ::= "class" Ident Implements;
InterDec.	ClassHeader ::= "interface" Ident;

InterImpl.  Implements ::= "implements" Ident;
EImpl.      Implements ::= "" ;

Dvar.			FieldDeclaration ::= Modifier Type [Item] ";";
Dmth.			FieldDeclaration ::= Modifier Type Ident "(" [Arg] ")" MethodBody ;
terminator  	FieldDeclaration "";


EmptyMBody. MethodBody ::= ";" ;
MBody.      MethodBody ::= Block ;

--- modifiers -----------------------------------------------

Mfinal.		  Modifier ::= "final";
Mpublic.	  Modifier ::= "public";
Mprivate.	  Modifier ::= "private";
Mstatic.	  Modifier ::= "static";
MEmpty.       Modifier ::= "" ;
terminator Modifier "";


-- statements ----------------------------------------------

BlockS.    Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Lhs "=" Expr  ";" ;

Incr.      Stmt ::= Lhs "++"  ";" ;

Decr.      Stmt ::= Lhs "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

ForArr.    Stmt ::= "for" "(" TypeName Ident ":" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- LHS & RHS -----------------------------------------------

VariableRawLhs.     Lhs ::= Ident ;
ArrElemLhs.         Lhs ::= Ident "[" Expr "]" ;





-- Types ---------------------------------------------------

Int.       BasicType ::= "int" ;
Str.       BasicType ::= "string" ;
Bool.      BasicType ::= "boolean" ;
Void.      BasicType ::= "void" ;

BuiltIn.   TypeName ::= BasicType ;
ClassName. TypeName ::= Ident ;

ArrayType. Type ::= TypeName "[]" ;
TypeNameS. Type ::= TypeName ;

-- internal   Fun. Type ::= Type "(" [Type] ")" ;
separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr8 ::= Ident ;
ELitInt.   Expr8 ::= Integer ;
ELitTrue.  Expr8 ::= "true" ;
ELitFalse. Expr8 ::= "false" ;
EThis.     Expr8 ::= "this" ;
ENull.     Expr8 ::= "null" ;
EApp.      Expr8 ::= Ident "(" [Expr] ")" ;
EString.   Expr8 ::= String ;
EConstr.   Expr8 ::= "new" Ident ;

EArrConstr. Expr7 ::= "new" TypeName "[" Expr "]" ;
ENDArrAcc.  Expr7 ::= Expr8 "[" Expr "]" ;

EObjAcc.  Expr6 ::= Expr7 ObjAcc ;

Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 8 ;

separator  Expr "," ;

-- object access ------------------------------------------

ObjFieldAcc. ObjAcc ::= "." Ident ;
ObjMethAcc.  ObjAcc ::= "." Ident "(" [Expr] ")" ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;


-- comments ------------------------------------------------

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;
