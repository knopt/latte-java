package Latte.Absyn; // Java Package generated by the BNF Converter.

import java.util.function.Function;

public abstract class Expr implements java.io.Serializable {
    public abstract <R, A> R accept(Expr.Visitor<R, A> v, A arg);

    public interface Visitor<R, A> {
        public R visit(Latte.Absyn.EVar p, A arg);

        public R visit(Latte.Absyn.ELitInt p, A arg);

        public R visit(Latte.Absyn.ELitTrue p, A arg);

        public R visit(Latte.Absyn.ELitFalse p, A arg);

        public R visit(Latte.Absyn.EThis p, A arg);

        public R visit(Latte.Absyn.ENull p, A arg);

        public R visit(Latte.Absyn.EApp p, A arg);

        public R visit(Latte.Absyn.EString p, A arg);

        public R visit(Latte.Absyn.EConstr p, A arg);

        public R visit(Latte.Absyn.EArrConstr p, A arg);

        public R visit(Latte.Absyn.ENDArrAcc p, A arg);

        public R visit(Latte.Absyn.FieldAcc p, A arg);

        public R visit(Latte.Absyn.MethodCall p, A arg);

        public R visit(Latte.Absyn.Neg p, A arg);

        public R visit(Latte.Absyn.Not p, A arg);

        public R visit(Latte.Absyn.EMul p, A arg);

        public R visit(Latte.Absyn.EAdd p, A arg);

        public R visit(Latte.Absyn.ERel p, A arg);

        public R visit(Latte.Absyn.EAnd p, A arg);

        public R visit(Latte.Absyn.EOr p, A arg);

    }

    public abstract <T> T match(Function<Latte.Absyn.EVar, T> eVar,
                                Function<Latte.Absyn.ELitInt, T> eLitInt,
                                Function<Latte.Absyn.ELitTrue, T> eLitTrue,
                                Function<Latte.Absyn.ELitFalse, T> eLitFalse,
                                Function<Latte.Absyn.EThis, T> eThis,
                                Function<Latte.Absyn.ENull, T> eNull,
                                Function<Latte.Absyn.EApp, T> eApp,
                                Function<Latte.Absyn.EString, T> eString,
                                Function<Latte.Absyn.EConstr, T> eConstr,
                                Function<Latte.Absyn.EArrConstr, T> eArrConstr,
                                Function<Latte.Absyn.ENDArrAcc, T> eNDArrAcc,
                                Function<Latte.Absyn.FieldAcc, T> fieldAcc,
                                Function<Latte.Absyn.MethodCall, T> methodCall,
                                Function<Latte.Absyn.Neg, T> neg,
                                Function<Latte.Absyn.Not, T> not,
                                Function<Latte.Absyn.EMul, T> eMul,
                                Function<Latte.Absyn.EAdd, T> eAdd,
                                Function<Latte.Absyn.ERel, T> eRel,
                                Function<Latte.Absyn.EAnd, T> eAnd,
                                Function<Latte.Absyn.EOr, T> eOr);

}
