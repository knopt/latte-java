package Latte.Absyn; // Java Package generated by the BNF Converter.

import java.util.Objects;
import java.util.function.Function;

public class ForArr extends Stmt {
    public final TypeName typename_;
    public final String ident_;
    public final Expr expr_;
    public final Stmt stmt_;
    public int line_num, col_num, offset;

    public ForArr(TypeName p1, String p2, Expr p3, Stmt p4) {
        typename_ = p1;
        ident_ = p2;
        expr_ = p3;
        stmt_ = p4;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ForArr forArr = (ForArr) o;
        return line_num == forArr.line_num &&
                col_num == forArr.col_num &&
                offset == forArr.offset &&
                Objects.equals(typename_, forArr.typename_) &&
                Objects.equals(ident_, forArr.ident_) &&
                Objects.equals(expr_, forArr.expr_) &&
                Objects.equals(stmt_, forArr.stmt_);
    }

    @Override
    public int hashCode() {
        return Objects.hash(typename_, ident_, expr_, stmt_, line_num, col_num, offset);
    }

    public <T> T match(Function<Empty, T> empty,
                       Function<BStmt, T> bStmt,
                       Function<Decl, T> decl,
                       Function<Ass, T> ass,
                       Function<Incr, T> incr,
                       Function<Decr, T> decr,
                       Function<Ret, T> ret,
                       Function<VRet, T> vRet,
                       Function<Cond, T> cond,
                       Function<CondElse, T> condElse,
                       Function<While, T> sWhile,
                       Function<SExp, T> sExp,
                       Function<ForArr, T> forArr) {
        return forArr.apply(this);
    }
}
