// -*- Java -*- This Cup file was machine-generated by BNFC
package Latte;

action code {:
public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}
:}
parser code {:
  public Latte.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (Latte.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal Latte.Absyn.Program Program;
nonterminal Latte.Absyn.TopDef TopDef;
nonterminal Latte.Absyn.ListTopDef ListTopDef;
nonterminal Latte.Absyn.Arg Arg;
nonterminal Latte.Absyn.ListArg ListArg;
nonterminal Latte.Absyn.ClassHeader ClassHeader;
nonterminal Latte.Absyn.FieldDeclaration FieldDeclaration;
nonterminal Latte.Absyn.ListFieldDeclaration ListFieldDeclaration;
nonterminal Latte.Absyn.MethodBody MethodBody;
nonterminal Latte.Absyn.Modifier Modifier;
nonterminal Latte.Absyn.ListModifier ListModifier;
nonterminal Latte.Absyn.Block Block;
nonterminal Latte.Absyn.ListStmt ListStmt;
nonterminal Latte.Absyn.Stmt Stmt;
nonterminal Latte.Absyn.Item Item;
nonterminal Latte.Absyn.ListItem ListItem;
nonterminal Latte.Absyn.BasicType BasicType;
nonterminal Latte.Absyn.TypeName TypeName;
nonterminal Latte.Absyn.Type Type;
nonterminal Latte.Absyn.EmptyBracket EmptyBracket;
nonterminal Latte.Absyn.ListEmptyBracket ListEmptyBracket;
nonterminal Latte.Absyn.SizeBracket SizeBracket;
nonterminal Latte.Absyn.ListSizeBracket ListSizeBracket;
nonterminal Latte.Absyn.ListType ListType;
nonterminal Latte.Absyn.Expr Expr7;
nonterminal Latte.Absyn.Expr Expr6;
nonterminal Latte.Absyn.Expr Expr5;
nonterminal Latte.Absyn.Expr Expr4;
nonterminal Latte.Absyn.Expr Expr3;
nonterminal Latte.Absyn.Expr Expr2;
nonterminal Latte.Absyn.Expr Expr1;
nonterminal Latte.Absyn.Expr Expr;
nonterminal Latte.Absyn.ListExpr ListExpr;
nonterminal Latte.Absyn.AddOp AddOp;
nonterminal Latte.Absyn.MulOp MulOp;
nonterminal Latte.Absyn.RelOp RelOp;

terminal _SYMB_0;    //   (
terminal _SYMB_1;    //   )
terminal _SYMB_2;    //   {
terminal _SYMB_3;    //   }
terminal _SYMB_4;    //   ,
terminal _SYMB_5;    //   ;
terminal _SYMB_6;    //   =
terminal _SYMB_7;    //   ++
terminal _SYMB_8;    //   --
terminal _SYMB_9;    //   []
terminal _SYMB_10;    //   [
terminal _SYMB_11;    //   ]
terminal _SYMB_12;    //   .
terminal _SYMB_13;    //   -
terminal _SYMB_14;    //   !
terminal _SYMB_15;    //   &&
terminal _SYMB_16;    //   ||
terminal _SYMB_17;    //   +
terminal _SYMB_18;    //   *
terminal _SYMB_19;    //   /
terminal _SYMB_20;    //   %
terminal _SYMB_21;    //   <
terminal _SYMB_22;    //   <=
terminal _SYMB_23;    //   >
terminal _SYMB_24;    //   >=
terminal _SYMB_25;    //   ==
terminal _SYMB_26;    //   !=
terminal _SYMB_27;    //   boolean
terminal _SYMB_28;    //   class
terminal _SYMB_29;    //   else
terminal _SYMB_30;    //   false
terminal _SYMB_31;    //   final
terminal _SYMB_32;    //   if
terminal _SYMB_33;    //   int
terminal _SYMB_34;    //   interface
terminal _SYMB_35;    //   new
terminal _SYMB_36;    //   null
terminal _SYMB_37;    //   private
terminal _SYMB_38;    //   public
terminal _SYMB_39;    //   return
terminal _SYMB_40;    //   static
terminal _SYMB_41;    //   string
terminal _SYMB_42;    //   this
terminal _SYMB_43;    //   true
terminal _SYMB_44;    //   void
terminal _SYMB_45;    //   while

terminal String _STRING_;

terminal Integer _INTEGER_;

terminal String _IDENT_;



start with Program;


Program ::= ListTopDef:p_1  {: RESULT = new Latte.Absyn.ProgramTD(p_1); :} 
;
TopDef ::= Type:p_1 _IDENT_:p_2 _SYMB_0:p_3 ListArg:p_4 _SYMB_1:p_5 Block:p_6  {: RESULT = new Latte.Absyn.FnDef(p_1,p_2,p_4,p_6); :} 
  | ClassHeader:p_1 _SYMB_2:p_2 ListFieldDeclaration:p_3 _SYMB_3:p_4  {: RESULT = new Latte.Absyn.ClassDecl(p_1,p_3); :}
;
ListTopDef ::= TopDef:p_1  {: RESULT = new Latte.Absyn.ListTopDef(); RESULT.addLast(p_1); :} 
  | TopDef:p_1 ListTopDef:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
Arg ::= Type:p_1 _IDENT_:p_2  {: RESULT = new Latte.Absyn.ArgTI(p_1,p_2); :} 
;
ListArg ::=  /* empty */  {: RESULT = new Latte.Absyn.ListArg(); :} 
  | Arg:p_1  {: RESULT = new Latte.Absyn.ListArg(); RESULT.addLast(p_1); :}
  | Arg:p_1 _SYMB_4:p_2 ListArg:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ClassHeader ::= _SYMB_28:p_1 _IDENT_:p_2  {: RESULT = new Latte.Absyn.ClassDec(p_2); :} 
  | _SYMB_34:p_1 _IDENT_:p_2  {: RESULT = new Latte.Absyn.InterDec(p_2); :}
;
FieldDeclaration ::= Modifier:p_1 Type:p_2 ListItem:p_3 _SYMB_5:p_4  {: RESULT = new Latte.Absyn.Dvar(p_1,p_2,p_3); :} 
  | Modifier:p_1 Type:p_2 _IDENT_:p_3 _SYMB_0:p_4 ListArg:p_5 _SYMB_1:p_6 MethodBody:p_7  {: RESULT = new Latte.Absyn.Dmth(p_1,p_2,p_3,p_5,p_7); :}
;
ListFieldDeclaration ::=  /* empty */  {: RESULT = new Latte.Absyn.ListFieldDeclaration(); :} 
  | ListFieldDeclaration:p_1 FieldDeclaration:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
MethodBody ::= _SYMB_5:p_1  {: RESULT = new Latte.Absyn.EmptyMBody(); :} 
  | Block:p_1  {: RESULT = new Latte.Absyn.MBody(p_1); :}
;
Modifier ::= _SYMB_31:p_1  {: RESULT = new Latte.Absyn.Mfinal(); :} 
  | _SYMB_38:p_1  {: RESULT = new Latte.Absyn.Mpublic(); :}
  | _SYMB_37:p_1  {: RESULT = new Latte.Absyn.Mprivate(); :}
  | _SYMB_40:p_1  {: RESULT = new Latte.Absyn.Mstatic(); :}
  |  /* empty */  {: RESULT = new Latte.Absyn.MEmpty(); :}
;
ListModifier ::=  /* empty */  {: RESULT = new Latte.Absyn.ListModifier(); :} 
  | ListModifier:p_1 Modifier:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Block ::= _SYMB_2:p_1 ListStmt:p_2 _SYMB_3:p_3  {: RESULT = new Latte.Absyn.BlockS(p_2); :} 
;
ListStmt ::=  /* empty */  {: RESULT = new Latte.Absyn.ListStmt(); :} 
  | ListStmt:p_1 Stmt:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Stmt ::= _SYMB_5:p_1  {: RESULT = new Latte.Absyn.Empty(); :} 
  | Block:p_1  {: RESULT = new Latte.Absyn.BStmt(p_1); :}
  | Type:p_1 ListItem:p_2 _SYMB_5:p_3  {: RESULT = new Latte.Absyn.Decl(p_1,p_2); :}
  | _IDENT_:p_1 _SYMB_6:p_2 Expr:p_3 _SYMB_5:p_4  {: RESULT = new Latte.Absyn.Ass(p_1,p_3); :}
  | _IDENT_:p_1 _SYMB_7:p_2 _SYMB_5:p_3  {: RESULT = new Latte.Absyn.Incr(p_1); :}
  | _IDENT_:p_1 _SYMB_8:p_2 _SYMB_5:p_3  {: RESULT = new Latte.Absyn.Decr(p_1); :}
  | _SYMB_39:p_1 Expr:p_2 _SYMB_5:p_3  {: RESULT = new Latte.Absyn.Ret(p_2); :}
  | _SYMB_39:p_1 _SYMB_5:p_2  {: RESULT = new Latte.Absyn.VRet(); :}
  | _SYMB_32:p_1 _SYMB_0:p_2 Expr:p_3 _SYMB_1:p_4 Stmt:p_5  {: RESULT = new Latte.Absyn.Cond(p_3,p_5); :}
  | _SYMB_32:p_1 _SYMB_0:p_2 Expr:p_3 _SYMB_1:p_4 Stmt:p_5 _SYMB_29:p_6 Stmt:p_7  {: RESULT = new Latte.Absyn.CondElse(p_3,p_5,p_7); :}
  | _SYMB_45:p_1 _SYMB_0:p_2 Expr:p_3 _SYMB_1:p_4 Stmt:p_5  {: RESULT = new Latte.Absyn.While(p_3,p_5); :}
  | Expr:p_1 _SYMB_5:p_2  {: RESULT = new Latte.Absyn.SExp(p_1); :}
;
Item ::= _IDENT_:p_1  {: RESULT = new Latte.Absyn.NoInit(p_1); :} 
  | _IDENT_:p_1 _SYMB_6:p_2 Expr:p_3  {: RESULT = new Latte.Absyn.Init(p_1,p_3); :}
;
ListItem ::= Item:p_1  {: RESULT = new Latte.Absyn.ListItem(); RESULT.addLast(p_1); :} 
  | Item:p_1 _SYMB_4:p_2 ListItem:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
BasicType ::= _SYMB_33:p_1  {: RESULT = new Latte.Absyn.Int(); :} 
  | _SYMB_41:p_1  {: RESULT = new Latte.Absyn.Str(); :}
  | _SYMB_27:p_1  {: RESULT = new Latte.Absyn.Bool(); :}
  | _SYMB_44:p_1  {: RESULT = new Latte.Absyn.Void(); :}
;
TypeName ::= BasicType:p_1  {: RESULT = new Latte.Absyn.BuiltIn(p_1); :} 
  | _IDENT_:p_1  {: RESULT = new Latte.Absyn.ClassName(p_1); :}
;
Type ::= TypeName:p_1 ListEmptyBracket:p_2  {: RESULT = new Latte.Absyn.ArrayType(p_1,p_2); :} 
  | TypeName:p_1  {: RESULT = new Latte.Absyn.TypeNameS(p_1); :}
;
EmptyBracket ::= _SYMB_9:p_1  {: RESULT = new Latte.Absyn.EBracket(); :} 
;
ListEmptyBracket ::= EmptyBracket:p_1  {: RESULT = new Latte.Absyn.ListEmptyBracket(); RESULT.addLast(p_1); :} 
  | EmptyBracket:p_1 ListEmptyBracket:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
SizeBracket ::= _SYMB_10:p_1 Expr:p_2 _SYMB_11:p_3  {: RESULT = new Latte.Absyn.SBracket(p_2); :} 
;
ListSizeBracket ::= SizeBracket:p_1  {: RESULT = new Latte.Absyn.ListSizeBracket(); RESULT.addLast(p_1); :} 
  | SizeBracket:p_1 ListSizeBracket:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
ListType ::=  /* empty */  {: RESULT = new Latte.Absyn.ListType(); :} 
  | Type:p_1  {: RESULT = new Latte.Absyn.ListType(); RESULT.addLast(p_1); :}
  | Type:p_1 _SYMB_4:p_2 ListType:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Expr7 ::= _IDENT_:p_1  {: RESULT = new Latte.Absyn.EVar(p_1); :} 
  | _INTEGER_:p_1  {: RESULT = new Latte.Absyn.ELitInt(p_1); :}
  | _SYMB_43:p_1  {: RESULT = new Latte.Absyn.ELitTrue(); :}
  | _SYMB_30:p_1  {: RESULT = new Latte.Absyn.ELitFalse(); :}
  | _SYMB_42:p_1  {: RESULT = new Latte.Absyn.EThis(); :}
  | _SYMB_36:p_1  {: RESULT = new Latte.Absyn.ENull(); :}
  | _IDENT_:p_1 _SYMB_0:p_2 ListExpr:p_3 _SYMB_1:p_4  {: RESULT = new Latte.Absyn.EApp(p_1,p_3); :}
  | _STRING_:p_1  {: RESULT = new Latte.Absyn.EString(p_1); :}
  | _SYMB_35:p_1 _IDENT_:p_2  {: RESULT = new Latte.Absyn.EConstr(p_2); :}
  | _SYMB_0:p_1 Expr:p_2 _SYMB_1:p_3  {: RESULT = p_2; :}
;
Expr6 ::= _SYMB_35:p_1 _IDENT_:p_2 ListSizeBracket:p_3  {: RESULT = new Latte.Absyn.EArrConstr(p_2,p_3); :} 
  | Expr:p_1 ListSizeBracket:p_2  {: RESULT = new Latte.Absyn.ENDArrAcc(p_1,p_2); :}
  | Expr7:p_1  {: RESULT = p_1; :}
;
Expr5 ::= Expr:p_1 _SYMB_12:p_2 _IDENT_:p_3  {: RESULT = new Latte.Absyn.FieldAcc(p_1,p_3); :} 
  | Expr:p_1 _SYMB_12:p_2 _IDENT_:p_3 _SYMB_0:p_4 ListExpr:p_5 _SYMB_1:p_6  {: RESULT = new Latte.Absyn.MethodCall(p_1,p_3,p_5); :}
  | _SYMB_13:p_1 Expr6:p_2  {: RESULT = new Latte.Absyn.Neg(p_2); :}
  | _SYMB_14:p_1 Expr6:p_2  {: RESULT = new Latte.Absyn.Not(p_2); :}
  | Expr6:p_1  {: RESULT = p_1; :}
;
Expr4 ::= Expr4:p_1 MulOp:p_2 Expr5:p_3  {: RESULT = new Latte.Absyn.EMul(p_1,p_2,p_3); :} 
  | Expr5:p_1  {: RESULT = p_1; :}
;
Expr3 ::= Expr3:p_1 AddOp:p_2 Expr4:p_3  {: RESULT = new Latte.Absyn.EAdd(p_1,p_2,p_3); :} 
  | Expr4:p_1  {: RESULT = p_1; :}
;
Expr2 ::= Expr2:p_1 RelOp:p_2 Expr3:p_3  {: RESULT = new Latte.Absyn.ERel(p_1,p_2,p_3); :} 
  | Expr3:p_1  {: RESULT = p_1; :}
;
Expr1 ::= Expr2:p_1 _SYMB_15:p_2 Expr1:p_3  {: RESULT = new Latte.Absyn.EAnd(p_1,p_3); :} 
  | Expr2:p_1  {: RESULT = p_1; :}
;
Expr ::= Expr1:p_1 _SYMB_16:p_2 Expr:p_3  {: RESULT = new Latte.Absyn.EOr(p_1,p_3); :} 
  | Expr1:p_1  {: RESULT = p_1; :}
;
ListExpr ::=  /* empty */  {: RESULT = new Latte.Absyn.ListExpr(); :} 
  | Expr:p_1  {: RESULT = new Latte.Absyn.ListExpr(); RESULT.addLast(p_1); :}
  | Expr:p_1 _SYMB_4:p_2 ListExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
AddOp ::= _SYMB_17:p_1  {: RESULT = new Latte.Absyn.Plus(); :} 
  | _SYMB_13:p_1  {: RESULT = new Latte.Absyn.Minus(); :}
;
MulOp ::= _SYMB_18:p_1  {: RESULT = new Latte.Absyn.Times(); :} 
  | _SYMB_19:p_1  {: RESULT = new Latte.Absyn.Div(); :}
  | _SYMB_20:p_1  {: RESULT = new Latte.Absyn.Mod(); :}
;
RelOp ::= _SYMB_21:p_1  {: RESULT = new Latte.Absyn.LTH(); :} 
  | _SYMB_22:p_1  {: RESULT = new Latte.Absyn.LE(); :}
  | _SYMB_23:p_1  {: RESULT = new Latte.Absyn.GTH(); :}
  | _SYMB_24:p_1  {: RESULT = new Latte.Absyn.GE(); :}
  | _SYMB_25:p_1  {: RESULT = new Latte.Absyn.EQU(); :}
  | _SYMB_26:p_1  {: RESULT = new Latte.Absyn.NE(); :}
;

