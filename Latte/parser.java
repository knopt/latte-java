
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Nov 06 10:45:07 CET 2018
//----------------------------------------------------

package Latte;


import java_cup.runtime.SymbolFactory;

/** CUP v0.10k generated parser.
  * @version Tue Nov 06 10:45:07 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  public parser(java_cup.runtime.Scanner s, SymbolFactory symfac) {super(s, symfac);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\003\003\000\002\004" +
    "\010\000\002\004\006\000\002\005\003\000\002\005\004" +
    "\000\002\006\004\000\002\007\002\000\002\007\003\000" +
    "\002\007\005\000\002\010\004\000\002\010\004\000\002" +
    "\011\006\000\002\011\011\000\002\012\002\000\002\012" +
    "\004\000\002\013\003\000\002\013\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\002\000\002\015\002\000\002\015\004\000\002" +
    "\016\005\000\002\017\002\000\002\017\004\000\002\020" +
    "\003\000\002\020\003\000\002\020\005\000\002\020\006" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\004\000\002\020\007\000\002\020\011\000\002" +
    "\020\007\000\002\020\004\000\002\021\003\000\002\021" +
    "\005\000\002\022\003\000\002\022\005\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\004\000\002" +
    "\025\003\000\002\026\003\000\002\027\003\000\002\027" +
    "\004\000\002\030\005\000\002\031\003\000\002\031\004" +
    "\000\002\032\002\000\002\032\003\000\002\032\005\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\006\000\002\033\003\000\002\033\004\000\002\033\005" +
    "\000\002\034\005\000\002\034\004\000\002\034\003\000" +
    "\002\035\005\000\002\035\010\000\002\035\004\000\002" +
    "\035\004\000\002\035\003\000\002\036\005\000\002\036" +
    "\003\000\002\037\005\000\002\037\003\000\002\040\005" +
    "\000\002\040\003\000\002\041\005\000\002\041\003\000" +
    "\002\042\005\000\002\042\003\000\002\043\002\000\002" +
    "\043\003\000\002\043\005\000\002\044\003\000\002\044" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\020\037\010\040\007\045\021\046\020\055" +
    "\017\060\015\064\016\001\002\000\004\064\232\001\002" +
    "\000\004\002\231\001\002\000\004\002\000\001\002\000" +
    "\004\064\230\001\002\000\006\015\uffd3\064\uffd3\001\002" +
    "\000\022\002\ufffd\037\010\040\007\045\021\046\020\055" +
    "\017\060\015\064\016\001\002\000\004\006\027\001\002" +
    "\000\006\015\uffd1\064\uffd1\001\002\000\006\015\024\064" +
    "\uffce\001\002\000\006\015\uffd2\064\uffd2\001\002\000\006" +
    "\015\uffd0\064\uffd0\001\002\000\006\015\uffd4\064\uffd4\001" +
    "\002\000\004\064\022\001\002\000\006\015\uffd5\064\uffd5" +
    "\001\002\000\004\006\ufff6\001\002\000\006\015\024\064" +
    "\uffcc\001\002\000\006\015\uffcd\064\uffcd\001\002\000\004" +
    "\064\uffcf\001\002\000\004\064\uffcb\001\002\000\026\007" +
    "\ufff3\037\ufff3\043\ufff3\045\ufff3\051\ufff3\052\ufff3\054\ufff3" +
    "\055\ufff3\060\ufff3\064\ufff3\001\002\000\026\007\031\037" +
    "\uffeb\043\033\045\uffeb\051\037\052\036\054\034\055\uffeb" +
    "\060\uffeb\064\uffeb\001\002\000\022\002\ufffe\037\ufffe\040" +
    "\ufffe\045\ufffe\046\ufffe\055\ufffe\060\ufffe\064\ufffe\001\002" +
    "\000\014\037\010\045\021\055\017\060\015\064\016\001" +
    "\002\000\014\037\uffef\045\uffef\055\uffef\060\uffef\064\uffef" +
    "\001\002\000\014\037\uffec\045\uffec\055\uffec\060\uffec\064" +
    "\uffec\001\002\000\026\007\ufff2\037\ufff2\043\ufff2\045\ufff2" +
    "\051\ufff2\052\ufff2\054\ufff2\055\ufff2\060\ufff2\064\ufff2\001" +
    "\002\000\014\037\uffee\045\uffee\055\uffee\060\uffee\064\uffee" +
    "\001\002\000\014\037\uffed\045\uffed\055\uffed\060\uffed\064" +
    "\uffed\001\002\000\004\064\042\001\002\000\006\010\225" +
    "\011\uffd7\001\002\000\012\004\045\010\uffd9\011\uffd9\012" +
    "\046\001\002\000\004\011\044\001\002\000\026\007\ufff5" +
    "\037\ufff5\043\ufff5\045\ufff5\051\ufff5\052\ufff5\054\ufff5\055" +
    "\ufff5\060\ufff5\064\ufff5\001\002\000\016\005\ufffa\037\010" +
    "\045\021\055\017\060\015\064\016\001\002\000\030\004" +
    "\071\021\066\022\065\042\061\047\052\050\047\056\070" +
    "\057\067\062\053\063\050\064\056\001\002\000\050\005" +
    "\uffbf\010\uffbf\011\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\001\002" +
    "\000\050\005\uffc3\010\uffc3\011\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\001\002\000\050\005\uffb8\010\uffb8\011\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\001\002\000\004\064\145\001\002\000" +
    "\050\005\uffbd\010\uffbd\011\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\001\002\000\050\005\uffb3\010\uffb3\011\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\001\002\000\050\005\uffb1\010\uffb1\011\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\001\002\000\052\004\142\005" +
    "\uffc4\010\uffc4\011\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\001\002" +
    "\000\050\005\uffaf\010\uffaf\011\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\023\uffaf\024\uffaf\025\uffaf\026\137\027\135" +
    "\030\136\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\001\002\000\042\005\uffad\010\uffad\011\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\132\023\uffad\024\uffad\025\131\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\001\002" +
    "\000\050\005\uffc1\010\uffc1\011\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\001\002\000\036\005\uffab\010\uffab\011\uffab\016\uffab" +
    "\017\uffab\020\uffab\023\122\024\uffab\031\121\032\117\033" +
    "\126\034\125\035\124\036\123\001\002\000\020\005\uffa9" +
    "\010\uffa9\011\uffa9\016\uffa9\017\uffa9\020\uffa9\024\115\001" +
    "\002\000\012\010\uffd8\011\uffd8\016\073\020\077\001\002" +
    "\000\030\004\071\021\066\022\065\042\061\047\052\050" +
    "\047\056\070\057\067\062\053\063\050\064\056\001\002" +
    "\000\030\004\071\021\066\022\065\042\061\047\052\050" +
    "\047\056\070\057\067\062\053\063\050\064\056\001\002" +
    "\000\050\005\uffc2\010\uffc2\011\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\001\002\000\050\005\uffc0\010\uffc0\011\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\001\002\000\030\004\071\021\066\022" +
    "\065\042\061\047\052\050\047\056\070\057\067\062\053" +
    "\063\050\064\056\001\002\000\010\005\074\016\073\020" +
    "\077\001\002\000\030\004\071\021\066\022\065\042\061" +
    "\047\052\050\047\056\070\057\067\062\053\063\050\064" +
    "\056\001\002\000\050\005\uffbb\010\uffbb\011\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\001\002\000\050\005\uffc9\010\uffc9\011" +
    "\uffc9\016\073\017\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\001\002\000\050\005\uffb9" +
    "\010\uffb9\011\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\001\002\000" +
    "\004\064\100\001\002\000\052\004\101\005\uffb7\010\uffb7" +
    "\011\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\001\002\000\032\004" +
    "\071\005\uffa8\021\066\022\065\042\061\047\052\050\047" +
    "\056\070\057\067\062\053\063\050\064\056\001\002\000" +
    "\012\005\uffa7\010\105\016\073\020\077\001\002\000\004" +
    "\005\104\001\002\000\050\005\uffb6\010\uffb6\011\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\001\002\000\032\004\071\005\uffa8" +
    "\021\066\022\065\042\061\047\052\050\047\056\070\057" +
    "\067\062\053\063\050\064\056\001\002\000\004\005\uffa6" +
    "\001\002\000\050\005\uffc8\010\uffc8\011\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\001\002\000\010\016\073\017\111\020\077" +
    "\001\002\000\050\005\uffca\010\uffca\011\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\001\002\000\050\005\uffb5\010\uffb5\011\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\001\002\000\006\016\073\020" +
    "\077\001\002\000\050\005\uffb4\010\uffb4\011\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\001\002\000\030\004\071\021\066\022" +
    "\065\042\061\047\052\050\047\056\070\057\067\062\053" +
    "\063\050\064\056\001\002\000\016\005\uffaa\010\uffaa\011" +
    "\uffaa\016\073\017\uffaa\020\077\001\002\000\030\004\uff9f" +
    "\021\uff9f\022\uff9f\042\uff9f\047\uff9f\050\uff9f\056\uff9f\057" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\001\002\000\030\004\071" +
    "\021\066\022\065\042\061\047\052\050\047\056\070\057" +
    "\067\062\053\063\050\064\056\001\002\000\030\004\uffa0" +
    "\021\uffa0\022\uffa0\042\uffa0\047\uffa0\050\uffa0\056\uffa0\057" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\001\002\000\030\004\071" +
    "\021\066\022\065\042\061\047\052\050\047\056\070\057" +
    "\067\062\053\063\050\064\056\001\002\000\030\004\uff9b" +
    "\021\uff9b\022\uff9b\042\uff9b\047\uff9b\050\uff9b\056\uff9b\057" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\001\002\000\030\004\uff9c" +
    "\021\uff9c\022\uff9c\042\uff9c\047\uff9c\050\uff9c\056\uff9c\057" +
    "\uff9c\062\uff9c\063\uff9c\064\uff9c\001\002\000\030\004\uff9d" +
    "\021\uff9d\022\uff9d\042\uff9d\047\uff9d\050\uff9d\056\uff9d\057" +
    "\uff9d\062\uff9d\063\uff9d\064\uff9d\001\002\000\030\004\uff9e" +
    "\021\uff9e\022\uff9e\042\uff9e\047\uff9e\050\uff9e\056\uff9e\057" +
    "\uff9e\062\uff9e\063\uff9e\064\uff9e\001\002\000\020\005\uffac" +
    "\010\uffac\011\uffac\016\uffac\017\uffac\020\uffac\024\115\001" +
    "\002\000\042\005\uffae\010\uffae\011\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\132\023\uffae\024\uffae\025\131\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\001\002\000\030" +
    "\004\uffa5\021\uffa5\022\uffa5\042\uffa5\047\uffa5\050\uffa5\056" +
    "\uffa5\057\uffa5\062\uffa5\063\uffa5\064\uffa5\001\002\000\030" +
    "\004\uffa4\021\uffa4\022\uffa4\042\uffa4\047\uffa4\050\uffa4\056" +
    "\uffa4\057\uffa4\062\uffa4\063\uffa4\064\uffa4\001\002\000\030" +
    "\004\071\021\066\022\065\042\061\047\052\050\047\056" +
    "\070\057\067\062\053\063\050\064\056\001\002\000\050" +
    "\005\uffb0\010\uffb0\011\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\137\027\135\030\136" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\001" +
    "\002\000\030\004\uffa2\021\uffa2\022\uffa2\042\uffa2\047\uffa2" +
    "\050\uffa2\056\uffa2\057\uffa2\062\uffa2\063\uffa2\064\uffa2\001" +
    "\002\000\030\004\uffa1\021\uffa1\022\uffa1\042\uffa1\047\uffa1" +
    "\050\uffa1\056\uffa1\057\uffa1\062\uffa1\063\uffa1\064\uffa1\001" +
    "\002\000\030\004\uffa3\021\uffa3\022\uffa3\042\uffa3\047\uffa3" +
    "\050\uffa3\056\uffa3\057\uffa3\062\uffa3\063\uffa3\064\uffa3\001" +
    "\002\000\030\004\071\021\066\022\065\042\061\047\052" +
    "\050\047\056\070\057\067\062\053\063\050\064\056\001" +
    "\002\000\050\005\uffb2\010\uffb2\011\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\001\002\000\032\004\071\005\uffa8\021\066\022" +
    "\065\042\061\047\052\050\047\056\070\057\067\062\053" +
    "\063\050\064\056\001\002\000\004\005\144\001\002\000" +
    "\050\005\uffbe\010\uffbe\011\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\001\002\000\050\005\uffbc\010\uffbc\011\uffbc\016\073\017" +
    "\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\001\002\000\050\005\uffba\010\uffba\011\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\001\002\000\004\064\224\001" +
    "\002\000\004\005\154\001\002\000\006\005\ufff9\010\152" +
    "\001\002\000\016\005\ufffa\037\010\045\021\055\017\060" +
    "\015\064\016\001\002\000\004\005\ufff8\001\002\000\006" +
    "\006\155\011\160\001\002\000\054\004\uffe7\006\uffe7\007" +
    "\uffe7\011\uffe7\021\uffe7\022\uffe7\037\uffe7\042\uffe7\044\uffe7" +
    "\045\uffe7\047\uffe7\050\uffe7\053\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\001\002" +
    "\000\026\007\ufff0\037\ufff0\043\ufff0\045\ufff0\051\ufff0\052" +
    "\ufff0\054\ufff0\055\ufff0\060\ufff0\064\ufff0\001\002\000\026" +
    "\007\ufff4\037\ufff4\043\ufff4\045\ufff4\051\ufff4\052\ufff4\054" +
    "\ufff4\055\ufff4\060\ufff4\064\ufff4\001\002\000\026\007\ufff1" +
    "\037\ufff1\043\ufff1\045\ufff1\051\ufff1\052\ufff1\054\ufff1\055" +
    "\ufff1\060\ufff1\064\ufff1\001\002\000\054\004\071\006\155" +
    "\007\171\011\170\021\066\022\065\037\010\042\061\044" +
    "\163\045\021\047\052\050\047\053\173\055\017\056\070" +
    "\057\067\060\015\061\166\062\053\063\050\064\162\001" +
    "\002\000\056\004\142\011\uffc4\012\217\013\216\014\215" +
    "\015\uffd0\016\uffc4\020\uffc4\021\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\064\uffd0\001\002\000\004\004" +
    "\207\001\002\000\054\004\uffe6\006\uffe6\007\uffe6\011\uffe6" +
    "\021\uffe6\022\uffe6\037\uffe6\042\uffe6\044\uffe6\045\uffe6\047" +
    "\uffe6\050\uffe6\053\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\001\002\000\010\011" +
    "\206\016\073\020\077\001\002\000\004\004\202\001\002" +
    "\000\004\064\177\001\002\000\056\004\uffe5\006\uffe5\007" +
    "\uffe5\011\uffe5\021\uffe5\022\uffe5\037\uffe5\041\uffe5\042\uffe5" +
    "\044\uffe5\045\uffe5\047\uffe5\050\uffe5\053\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\001\002\000\074\002\uffe8\004\uffe8\006\uffe8\007\uffe8\011" +
    "\uffe8\021\uffe8\022\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\001\002\000" +
    "\056\004\uffe4\006\uffe4\007\uffe4\011\uffe4\021\uffe4\022\uffe4" +
    "\037\uffe4\041\uffe4\042\uffe4\044\uffe4\045\uffe4\047\uffe4\050" +
    "\uffe4\053\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\001\002\000\032\004\071\011" +
    "\175\021\066\022\065\042\061\047\052\050\047\056\070" +
    "\057\067\062\053\063\050\064\056\001\002\000\010\011" +
    "\176\016\073\020\077\001\002\000\056\004\uffde\006\uffde" +
    "\007\uffde\011\uffde\021\uffde\022\uffde\037\uffde\041\uffde\042" +
    "\uffde\044\uffde\045\uffde\047\uffde\050\uffde\053\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\001\002\000\056\004\uffdf\006\uffdf\007\uffdf\011\uffdf" +
    "\021\uffdf\022\uffdf\037\uffdf\041\uffdf\042\uffdf\044\uffdf\045" +
    "\uffdf\047\uffdf\050\uffdf\053\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\001\002\000" +
    "\010\010\uffd9\011\uffd9\012\046\001\002\000\004\011\201" +
    "\001\002\000\056\004\uffe3\006\uffe3\007\uffe3\011\uffe3\021" +
    "\uffe3\022\uffe3\037\uffe3\041\uffe3\042\uffe3\044\uffe3\045\uffe3" +
    "\047\uffe3\050\uffe3\053\uffe3\055\uffe3\056\uffe3\057\uffe3\060" +
    "\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\001\002\000\030" +
    "\004\071\021\066\022\065\042\061\047\052\050\047\056" +
    "\070\057\067\062\053\063\050\064\056\001\002\000\010" +
    "\005\204\016\073\020\077\001\002\000\052\004\071\006" +
    "\155\011\170\021\066\022\065\037\010\042\061\044\163" +
    "\045\021\047\052\050\047\053\173\055\017\056\070\057" +
    "\067\060\015\061\166\062\053\063\050\064\162\001\002" +
    "\000\056\004\uffdb\006\uffdb\007\uffdb\011\uffdb\021\uffdb\022" +
    "\uffdb\037\uffdb\041\uffdb\042\uffdb\044\uffdb\045\uffdb\047\uffdb" +
    "\050\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\001\002\000\056\004\uffda" +
    "\006\uffda\007\uffda\011\uffda\021\uffda\022\uffda\037\uffda\041" +
    "\uffda\042\uffda\044\uffda\045\uffda\047\uffda\050\uffda\053\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063" +
    "\uffda\064\uffda\001\002\000\030\004\071\021\066\022\065" +
    "\042\061\047\052\050\047\056\070\057\067\062\053\063" +
    "\050\064\056\001\002\000\010\005\211\016\073\020\077" +
    "\001\002\000\052\004\071\006\155\011\170\021\066\022" +
    "\065\037\010\042\061\044\163\045\021\047\052\050\047" +
    "\053\173\055\017\056\070\057\067\060\015\061\166\062" +
    "\053\063\050\064\162\001\002\000\056\004\uffdd\006\uffdd" +
    "\007\uffdd\011\uffdd\021\uffdd\022\uffdd\037\uffdd\041\213\042" +
    "\uffdd\044\uffdd\045\uffdd\047\uffdd\050\uffdd\053\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\001\002\000\052\004\071\006\155\011\170\021\066" +
    "\022\065\037\010\042\061\044\163\045\021\047\052\050" +
    "\047\053\173\055\017\056\070\057\067\060\015\061\166" +
    "\062\053\063\050\064\162\001\002\000\056\004\uffdc\006" +
    "\uffdc\007\uffdc\011\uffdc\021\uffdc\022\uffdc\037\uffdc\041\uffdc" +
    "\042\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\053\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\001\002\000\004\011\223\001\002\000\004\011" +
    "\222\001\002\000\030\004\071\021\066\022\065\042\061" +
    "\047\052\050\047\056\070\057\067\062\053\063\050\064" +
    "\056\001\002\000\010\011\221\016\073\020\077\001\002" +
    "\000\056\004\uffe2\006\uffe2\007\uffe2\011\uffe2\021\uffe2\022" +
    "\uffe2\037\uffe2\041\uffe2\042\uffe2\044\uffe2\045\uffe2\047\uffe2" +
    "\050\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002\000\056\004\uffe1" +
    "\006\uffe1\007\uffe1\011\uffe1\021\uffe1\022\uffe1\037\uffe1\041" +
    "\uffe1\042\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1\053\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063" +
    "\uffe1\064\uffe1\001\002\000\056\004\uffe0\006\uffe0\007\uffe0" +
    "\011\uffe0\021\uffe0\022\uffe0\037\uffe0\041\uffe0\042\uffe0\044" +
    "\uffe0\045\uffe0\047\uffe0\050\uffe0\053\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\001" +
    "\002\000\006\005\ufffb\010\ufffb\001\002\000\004\064\177" +
    "\001\002\000\004\011\uffd6\001\002\000\004\002\ufffc\001" +
    "\002\000\004\006\ufff7\001\002\000\004\002\001\001\002" +
    "\000\004\004\233\001\002\000\016\005\ufffa\037\010\045" +
    "\021\055\017\060\015\064\016\001\002\000\004\005\235" +
    "\001\002\000\004\006\155\001\002\000\022\002\uffff\037" +
    "\uffff\040\uffff\045\uffff\046\uffff\055\uffff\060\uffff\064\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\020\003\004\004\010\005\005\010\011\023" +
    "\012\024\013\025\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\010\005\226\010\011\023\012\024\013" +
    "\025\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\022\027\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\022\027\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\027\001\001\000\006\011\034\014\031\001\001" +
    "\000\002\001\001\000\010\023\012\024\013\025\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\040\022" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\150\007\147\023" +
    "\012\024\013\025\146\001\001\000\022\033\050\034\053" +
    "\035\054\036\056\037\057\040\061\041\062\042\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\137\001\001" +
    "\000\004\044\132\001\001\000\002\001\001\000\004\046" +
    "\117\001\001\000\002\001\001\000\006\030\074\031\075" +
    "\001\001\000\022\033\050\034\113\035\054\036\056\037" +
    "\057\040\061\041\062\042\112\001\001\000\022\033\050" +
    "\034\111\035\054\036\056\037\057\040\061\041\062\042" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\033\050\034\053\035\054\036\056\037\057\040\061\041" +
    "\062\042\071\001\001\000\006\030\074\031\075\001\001" +
    "\000\022\033\050\034\053\035\054\036\056\037\057\040" +
    "\061\041\062\042\107\001\001\000\002\001\001\000\006" +
    "\030\074\031\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\033\050\034\053\035\054" +
    "\036\056\037\057\040\061\041\062\042\101\043\102\001" +
    "\001\000\006\030\074\031\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\033\050\034\053\035\054\036" +
    "\056\037\057\040\061\041\062\042\101\043\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\074\031" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\074\031\075\001\001\000\002\001\001\000\022\033" +
    "\050\034\053\035\054\036\056\037\057\040\061\041\062" +
    "\042\115\001\001\000\006\030\074\031\075\001\001\000" +
    "\002\001\001\000\022\033\050\034\053\035\054\036\056" +
    "\037\127\040\061\041\062\042\112\001\001\000\002\001" +
    "\001\000\022\033\050\034\053\035\054\036\056\037\057" +
    "\040\061\041\126\042\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\033\050\034\053\035\054\036\133" +
    "\037\057\040\061\041\062\042\112\001\001\000\004\045" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\033\050\034\053\035\140\036\056\037" +
    "\057\040\061\041\062\042\112\001\001\000\002\001\001" +
    "\000\024\033\050\034\053\035\054\036\056\037\057\040" +
    "\061\041\062\042\101\043\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\074\031\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\150\007\152\023\012\024\013\025" +
    "\146\001\001\000\002\001\001\000\006\013\156\016\155" +
    "\001\001\000\004\017\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\016\171\020\163" +
    "\023\012\024\013\025\166\033\050\034\053\035\054\036" +
    "\056\037\057\040\061\041\062\042\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\074\031\075\001\001\000\002\001\001\000\006\021\040" +
    "\022\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\033\050\034\053\035\054\036\056" +
    "\037\057\040\061\041\062\042\173\001\001\000\006\030" +
    "\074\031\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\033\050\034\053\035\054\036\056\037\057\040\061" +
    "\041\062\042\202\001\001\000\006\030\074\031\075\001" +
    "\001\000\034\016\171\020\204\023\012\024\013\025\166" +
    "\033\050\034\053\035\054\036\056\037\057\040\061\041" +
    "\062\042\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\033\050\034\053\035\054\036\056\037\057\040" +
    "\061\041\062\042\207\001\001\000\006\030\074\031\075" +
    "\001\001\000\034\016\171\020\211\023\012\024\013\025" +
    "\166\033\050\034\053\035\054\036\056\037\057\040\061" +
    "\041\062\042\164\001\001\000\002\001\001\000\034\016" +
    "\171\020\213\023\012\024\013\025\166\033\050\034\053" +
    "\035\054\036\056\037\057\040\061\041\062\042\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\033\050\034\053\035\054\036\056\037\057\040" +
    "\061\041\062\042\217\001\001\000\006\030\074\031\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\040\022\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\150\007\233" +
    "\023\012\024\013\025\146\001\001\000\002\001\001\000" +
    "\004\016\235\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Latte.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (Latte.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // RelOp ::= _SYMB_26 
            {
              Latte.Absyn.RelOp RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.NE(); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RelOp ::= _SYMB_25 
            {
              Latte.Absyn.RelOp RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EQU(); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RelOp ::= _SYMB_24 
            {
              Latte.Absyn.RelOp RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.GE(); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RelOp ::= _SYMB_23 
            {
              Latte.Absyn.RelOp RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.GTH(); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RelOp ::= _SYMB_22 
            {
              Latte.Absyn.RelOp RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.LE(); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RelOp ::= _SYMB_21 
            {
              Latte.Absyn.RelOp RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.LTH(); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*RelOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MulOp ::= _SYMB_20 
            {
              Latte.Absyn.MulOp RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Mod(); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*MulOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MulOp ::= _SYMB_19 
            {
              Latte.Absyn.MulOp RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Div(); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*MulOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MulOp ::= _SYMB_18 
            {
              Latte.Absyn.MulOp RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Times(); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*MulOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AddOp ::= _SYMB_13 
            {
              Latte.Absyn.AddOp RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Minus(); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*AddOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AddOp ::= _SYMB_17 
            {
              Latte.Absyn.AddOp RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Plus(); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*AddOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ListExpr ::= Expr _SYMB_4 ListExpr 
            {
              Latte.Absyn.ListExpr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ListExpr p_3 = (Latte.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*ListExpr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ListExpr ::= Expr 
            {
              Latte.Absyn.ListExpr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*ListExpr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ListExpr ::= 
            {
              Latte.Absyn.ListExpr RESULT = null;
		 RESULT = new Latte.Absyn.ListExpr(); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*ListExpr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr1 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr1 _SYMB_16 Expr 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr1 ::= Expr2 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Expr1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr1 ::= Expr2 _SYMB_15 Expr1 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Expr1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr2 ::= Expr3 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Expr2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr2 ::= Expr2 RelOp Expr3 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.RelOp p_2 = (Latte.Absyn.RelOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ERel(p_1,p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Expr2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr3 ::= Expr4 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*Expr3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr3 ::= Expr3 AddOp Expr4 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.AddOp p_2 = (Latte.Absyn.AddOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EAdd(p_1,p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*Expr3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr4 ::= Expr5 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Expr4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr4 ::= Expr4 MulOp Expr5 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.MulOp p_2 = (Latte.Absyn.MulOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EMul(p_1,p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Expr4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr5 ::= Expr6 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Expr5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr5 ::= _SYMB_14 Expr6 
            {
              Latte.Absyn.Expr RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Expr p_2 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Not(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Expr5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr5 ::= _SYMB_13 Expr6 
            {
              Latte.Absyn.Expr RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Expr p_2 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Neg(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Expr5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr5 ::= Expr _SYMB_12 _IDENT_ _SYMB_0 ListExpr _SYMB_1 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.ListExpr p_5 = (Latte.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.MethodCall(p_1,p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Expr5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr5 ::= Expr _SYMB_12 _IDENT_ 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.FieldAcc(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Expr5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr6 ::= Expr7 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr6 ::= Expr ListSizeBracket 
            {
              Latte.Absyn.Expr RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ListSizeBracket p_2 = (Latte.Absyn.ListSizeBracket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ENDArrAcc(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr6 ::= _SYMB_35 _IDENT_ ListSizeBracket 
            {
              Latte.Absyn.Expr RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ListSizeBracket p_3 = (Latte.Absyn.ListSizeBracket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EArrConstr(p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Expr6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr7 ::= _SYMB_0 Expr _SYMB_1 
            {
              Latte.Absyn.Expr RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Expr p_2 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Expr7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr7 ::= _SYMB_35 _IDENT_ 
            {
              Latte.Absyn.Expr RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EConstr(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Expr7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr7 ::= _STRING_ 
            {
              Latte.Absyn.Expr RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EString(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Expr7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr7 ::= _IDENT_ _SYMB_0 ListExpr _SYMB_1 
            {
              Latte.Absyn.Expr RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.ListExpr p_3 = (Latte.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EApp(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Expr7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr7 ::= _SYMB_36 
            {
              Latte.Absyn.Expr RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ENull(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Expr7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr7 ::= _SYMB_42 
            {
              Latte.Absyn.Expr RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EThis(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Expr7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr7 ::= _SYMB_30 
            {
              Latte.Absyn.Expr RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ELitFalse(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Expr7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr7 ::= _SYMB_43 
            {
              Latte.Absyn.Expr RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ELitTrue(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Expr7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr7 ::= _INTEGER_ 
            {
              Latte.Absyn.Expr RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ELitInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Expr7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr7 ::= _IDENT_ 
            {
              Latte.Absyn.Expr RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Expr7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListType ::= Type _SYMB_4 ListType 
            {
              Latte.Absyn.ListType RESULT = null;
		Latte.Absyn.Type p_1 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ListType p_3 = (Latte.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListType*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListType ::= Type 
            {
              Latte.Absyn.ListType RESULT = null;
		Latte.Absyn.Type p_1 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ListType(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListType*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListType ::= 
            {
              Latte.Absyn.ListType RESULT = null;
		 RESULT = new Latte.Absyn.ListType(); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ListType*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListSizeBracket ::= SizeBracket ListSizeBracket 
            {
              Latte.Absyn.ListSizeBracket RESULT = null;
		Latte.Absyn.SizeBracket p_1 = (Latte.Absyn.SizeBracket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ListSizeBracket p_2 = (Latte.Absyn.ListSizeBracket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ListSizeBracket*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListSizeBracket ::= SizeBracket 
            {
              Latte.Absyn.ListSizeBracket RESULT = null;
		Latte.Absyn.SizeBracket p_1 = (Latte.Absyn.SizeBracket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ListSizeBracket(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ListSizeBracket*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SizeBracket ::= _SYMB_10 Expr _SYMB_11 
            {
              Latte.Absyn.SizeBracket RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Expr p_2 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.SBracket(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*SizeBracket*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListEmptyBracket ::= EmptyBracket ListEmptyBracket 
            {
              Latte.Absyn.ListEmptyBracket RESULT = null;
		Latte.Absyn.EmptyBracket p_1 = (Latte.Absyn.EmptyBracket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ListEmptyBracket p_2 = (Latte.Absyn.ListEmptyBracket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ListEmptyBracket*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListEmptyBracket ::= EmptyBracket 
            {
              Latte.Absyn.ListEmptyBracket RESULT = null;
		Latte.Absyn.EmptyBracket p_1 = (Latte.Absyn.EmptyBracket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ListEmptyBracket(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ListEmptyBracket*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EmptyBracket ::= _SYMB_9 
            {
              Latte.Absyn.EmptyBracket RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EBracket(); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*EmptyBracket*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Type ::= TypeName 
            {
              Latte.Absyn.Type RESULT = null;
		Latte.Absyn.TypeName p_1 = (Latte.Absyn.TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.TypeNameS(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Type ::= TypeName ListEmptyBracket 
            {
              Latte.Absyn.Type RESULT = null;
		Latte.Absyn.TypeName p_1 = (Latte.Absyn.TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ListEmptyBracket p_2 = (Latte.Absyn.ListEmptyBracket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ArrayType(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TypeName ::= _IDENT_ 
            {
              Latte.Absyn.TypeName RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ClassName(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*TypeName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TypeName ::= BasicType 
            {
              Latte.Absyn.TypeName RESULT = null;
		Latte.Absyn.BasicType p_1 = (Latte.Absyn.BasicType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.BuiltIn(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*TypeName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BasicType ::= _SYMB_44 
            {
              Latte.Absyn.BasicType RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Void(); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*BasicType*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BasicType ::= _SYMB_27 
            {
              Latte.Absyn.BasicType RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Bool(); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*BasicType*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BasicType ::= _SYMB_41 
            {
              Latte.Absyn.BasicType RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Str(); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*BasicType*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BasicType ::= _SYMB_33 
            {
              Latte.Absyn.BasicType RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Int(); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*BasicType*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListItem ::= Item _SYMB_4 ListItem 
            {
              Latte.Absyn.ListItem RESULT = null;
		Latte.Absyn.Item p_1 = (Latte.Absyn.Item)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ListItem p_3 = (Latte.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*ListItem*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ListItem ::= Item 
            {
              Latte.Absyn.ListItem RESULT = null;
		Latte.Absyn.Item p_1 = (Latte.Absyn.Item)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ListItem(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*ListItem*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Item ::= _IDENT_ _SYMB_6 Expr 
            {
              Latte.Absyn.Item RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Init(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Item*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Item ::= _IDENT_ 
            {
              Latte.Absyn.Item RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.NoInit(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Item*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stmt ::= Expr _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.Expr p_1 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.SExp(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stmt ::= _SYMB_45 _SYMB_0 Expr _SYMB_1 Stmt 
            {
              Latte.Absyn.Stmt RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Stmt p_5 = (Latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.While(p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stmt ::= _SYMB_32 _SYMB_0 Expr _SYMB_1 Stmt _SYMB_29 Stmt 
            {
              Latte.Absyn.Stmt RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latte.Absyn.Stmt p_5 = (Latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Stmt p_7 = (Latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.CondElse(p_3,p_5,p_7); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stmt ::= _SYMB_32 _SYMB_0 Expr _SYMB_1 Stmt 
            {
              Latte.Absyn.Stmt RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Stmt p_5 = (Latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Cond(p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stmt ::= _SYMB_39 _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.VRet(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stmt ::= _SYMB_39 Expr _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Expr p_2 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Ret(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stmt ::= _IDENT_ _SYMB_8 _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Decr(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stmt ::= _IDENT_ _SYMB_7 _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Incr(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stmt ::= _IDENT_ _SYMB_6 Expr _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.Expr p_3 = (Latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Ass(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stmt ::= Type ListItem _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.Type p_1 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.ListItem p_2 = (Latte.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Decl(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stmt ::= Block 
            {
              Latte.Absyn.Stmt RESULT = null;
		Latte.Absyn.Block p_1 = (Latte.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.BStmt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stmt ::= _SYMB_5 
            {
              Latte.Absyn.Stmt RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Empty(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListStmt ::= ListStmt Stmt 
            {
              Latte.Absyn.ListStmt RESULT = null;
		Latte.Absyn.ListStmt p_1 = (Latte.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Stmt p_2 = (Latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*ListStmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListStmt ::= 
            {
              Latte.Absyn.ListStmt RESULT = null;
		 RESULT = new Latte.Absyn.ListStmt(); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*ListStmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Block ::= _SYMB_2 ListStmt _SYMB_3 
            {
              Latte.Absyn.Block RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.ListStmt p_2 = (Latte.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.BlockS(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Block*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListModifier ::= ListModifier Modifier 
            {
              Latte.Absyn.ListModifier RESULT = null;
		Latte.Absyn.ListModifier p_1 = (Latte.Absyn.ListModifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Modifier p_2 = (Latte.Absyn.Modifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ListModifier*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListModifier ::= 
            {
              Latte.Absyn.ListModifier RESULT = null;
		 RESULT = new Latte.Absyn.ListModifier(); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ListModifier*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Modifier ::= 
            {
              Latte.Absyn.Modifier RESULT = null;
		 RESULT = new Latte.Absyn.MEmpty(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Modifier*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Modifier ::= _SYMB_40 
            {
              Latte.Absyn.Modifier RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Mstatic(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Modifier*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Modifier ::= _SYMB_37 
            {
              Latte.Absyn.Modifier RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Mprivate(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Modifier*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Modifier ::= _SYMB_38 
            {
              Latte.Absyn.Modifier RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Mpublic(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Modifier*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Modifier ::= _SYMB_31 
            {
              Latte.Absyn.Modifier RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Mfinal(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Modifier*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MethodBody ::= Block 
            {
              Latte.Absyn.MethodBody RESULT = null;
		Latte.Absyn.Block p_1 = (Latte.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.MBody(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*MethodBody*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MethodBody ::= _SYMB_5 
            {
              Latte.Absyn.MethodBody RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.EmptyMBody(); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*MethodBody*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListFieldDeclaration ::= ListFieldDeclaration FieldDeclaration 
            {
              Latte.Absyn.ListFieldDeclaration RESULT = null;
		Latte.Absyn.ListFieldDeclaration p_1 = (Latte.Absyn.ListFieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.FieldDeclaration p_2 = (Latte.Absyn.FieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ListFieldDeclaration*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListFieldDeclaration ::= 
            {
              Latte.Absyn.ListFieldDeclaration RESULT = null;
		 RESULT = new Latte.Absyn.ListFieldDeclaration(); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ListFieldDeclaration*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FieldDeclaration ::= Modifier Type _IDENT_ _SYMB_0 ListArg _SYMB_1 MethodBody 
            {
              Latte.Absyn.FieldDeclaration RESULT = null;
		Latte.Absyn.Modifier p_1 = (Latte.Absyn.Modifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Latte.Absyn.Type p_2 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latte.Absyn.ListArg p_5 = (Latte.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.MethodBody p_7 = (Latte.Absyn.MethodBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Dmth(p_1,p_2,p_3,p_5,p_7); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*FieldDeclaration*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FieldDeclaration ::= Modifier Type ListItem _SYMB_5 
            {
              Latte.Absyn.FieldDeclaration RESULT = null;
		Latte.Absyn.Modifier p_1 = (Latte.Absyn.Modifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latte.Absyn.Type p_2 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.ListItem p_3 = (Latte.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.Dvar(p_1,p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*FieldDeclaration*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ClassHeader ::= _SYMB_34 _IDENT_ 
            {
              Latte.Absyn.ClassHeader RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.InterDec(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*ClassHeader*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ClassHeader ::= _SYMB_28 _IDENT_ 
            {
              Latte.Absyn.ClassHeader RESULT = null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ClassDec(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*ClassHeader*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListArg ::= Arg _SYMB_4 ListArg 
            {
              Latte.Absyn.ListArg RESULT = null;
		Latte.Absyn.Arg p_1 = (Latte.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ListArg p_3 = (Latte.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListArg ::= Arg 
            {
              Latte.Absyn.ListArg RESULT = null;
		Latte.Absyn.Arg p_1 = (Latte.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListArg ::= 
            {
              Latte.Absyn.ListArg RESULT = null;
		 RESULT = new Latte.Absyn.ListArg(); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Arg ::= Type _IDENT_ 
            {
              Latte.Absyn.Arg RESULT = null;
		Latte.Absyn.Type p_1 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ArgTI(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Arg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListTopDef ::= TopDef ListTopDef 
            {
              Latte.Absyn.ListTopDef RESULT = null;
		Latte.Absyn.TopDef p_1 = (Latte.Absyn.TopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.ListTopDef p_2 = (Latte.Absyn.ListTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListTopDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListTopDef ::= TopDef 
            {
              Latte.Absyn.ListTopDef RESULT = null;
		Latte.Absyn.TopDef p_1 = (Latte.Absyn.TopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ListTopDef(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListTopDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TopDef ::= ClassHeader _SYMB_2 ListFieldDeclaration _SYMB_3 
            {
              Latte.Absyn.TopDef RESULT = null;
		Latte.Absyn.ClassHeader p_1 = (Latte.Absyn.ClassHeader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latte.Absyn.ListFieldDeclaration p_3 = (Latte.Absyn.ListFieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ClassDecl(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*TopDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TopDef ::= Type _IDENT_ _SYMB_0 ListArg _SYMB_1 Block 
            {
              Latte.Absyn.TopDef RESULT = null;
		Latte.Absyn.Type p_1 = (Latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latte.Absyn.ListArg p_4 = (Latte.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latte.Absyn.Block p_6 = (Latte.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.FnDef(p_1,p_2,p_4,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*TopDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListTopDef 
            {
              Latte.Absyn.Program RESULT = null;
		Latte.Absyn.ListTopDef p_1 = (Latte.Absyn.ListTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Latte.Absyn.ProgramTD(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		Latte.Absyn.Program start_val = (Latte.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

